#!/bin/bash

# Navigate to the Android codebase directory
cd codebase/android || exit 1 # Exit if cd fails

# Check if we actually have commits to push
if ! git diff --cached --quiet; then
    echo "Staged changes detected. Running tests..."
else
    echo "No staged changes to commit. Skipping tests."
    exit 0
fi

# Get the list of staged files
staged_files=$(git diff --cached --name-only --diff-filter=ACM "*.kt" "*.java") # Filter for Kotlin/Java files

if [ -z "$staged_files" ]; then
    echo "No Kotlin or Java files staged. Skipping tests."
    exit 0
fi

# Initialize a string to hold all identified module paths (potentially with duplicates)
# Each module path will be on a new line for easier processing with sort -u
raw_module_list=""

echo "Identifying modules from staged files:"
for file in $staged_files; do
    echo "Processing file: $file"
    # Regex to capture the module name (the directory after codebase/android/ and before /src/)
    if [[ "$file" =~ ^codebase/android/([^/]+)/src/ ]]; then
        module_name="${BASH_REMATCH[1]}"

        # Convert module directory name to Gradle task path
        gradle_module_path=""
        if [[ "$module_name" == "app" ]]; then # Common case for the main app module
            gradle_module_path=":app"
        else
            gradle_module_path=":$module_name"
        fi

        if [ -n "$gradle_module_path" ]; then
            echo "Found module: $gradle_module_path for file $file"
            # Append the gradle module path followed by a newline
            raw_module_list+="${gradle_module_path}\n"
        fi
    else
        echo "No module pattern matched for file: $file"
    fi
done

# Process the raw list to get unique, sorted module paths into an array
final_unique_modules_array=()
if [ -n "$raw_module_list" ]; then
    # Use 'printf' for portability and 'mapfile' to read directly into the array.
    # 1. 'printf "%b"' reliably processes the '\n' characters as newlines.
    # 2. 'sed' removes any blank lines.
    # 3. 'sort -u' finds the unique module lines.
    # 4. 'mapfile -t' reads each resulting line into the array, trimming the trailing newline.
    while IFS= read -r module; do
        final_unique_modules_array+=("$module")
    done < <(printf "%b" "$raw_module_list" | sed '/^$/d' | sort -u)
fi

test_commands=""
if [ ${#final_unique_modules_array[@]} -eq 0 ]; then
    echo "Could not determine modules for staged files. Running all tests..."
    test_commands="testDebugUnitTest"
else
    echo "Unique modules to test:"
    for module in "${final_unique_modules_array[@]}"; do
        echo "- $module"
        test_commands+="${module}:testDebugUnitTest "
    done
    # Remove trailing space from test_commands
    test_commands=$(echo "$test_commands" | sed 's/ *$//')
fi

if [ -z "$test_commands" ]; then
    echo "No test commands to run."
    exit 0
fi

CMD="./gradlew $test_commands"
echo "Executing: $CMD"
$CMD
RESULT=$?

if [ $RESULT -ne 0 ]; then
    echo "Tests failed."
    echo "Command: $CMD"
    exit 1
fi

echo "All specified tests passed."
exit 0
